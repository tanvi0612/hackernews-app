{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getNewStories","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","req","res","wrap","_context","prev","next","fetch","HN_DATABASE_URL","sent","json","abrupt","stop","_x","apply","this","arguments","getStoryInfo","_ref2","_callee2","storyId","_context2","_x2","App","_this","classCallCheck","console","log","possibleConstructorReturn","getPrototypeOf","call","onSwipeLeft","lastChildIndex","state","_stories","length","activePostIndex","Math","min","max","fetchData","setState","onSwipeRight","_callee3","storyIds","actions","results","filterResults","_context3","slice","map","Promise","all","filter","item","_this2","activePost","react_default","createElement","className","onClick","href","title","by","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAcMA,6BAAa,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAMC,GAAN,IAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACFC,MAChBC,0DAFkB,cACdP,EADcG,EAAAK,KAAAL,EAAAE,KAAA,EAIFL,EAAIS,OAJF,cAIdR,EAJcE,EAAAK,KAAAL,EAAAO,OAAA,SAKbT,GALa,wBAAAE,EAAAQ,SAAAb,MAAH,gBAAAc,GAAA,OAAApB,EAAAqB,MAAAC,KAAAC,YAAA,IAQbC,EAAY,eAAAC,EAAAxB,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAqB,EAAMC,GAAN,IAAAnB,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,cAAAe,EAAAf,KAAA,EACDC,MAChBC,+CAAgDY,EAAU,SAFzC,cACbnB,EADaoB,EAAAZ,KAAAY,EAAAf,KAAA,EAIDL,EAAIS,OAJH,cAIbR,EAJamB,EAAAZ,KAAAY,EAAAV,OAAA,SAKZT,GALY,wBAAAmB,EAAAT,SAAAO,MAAH,gBAAAG,GAAA,OAAAJ,EAAAJ,MAAAC,KAAAC,YAAA,GA+LHO,cA1Kb,SAAAA,IAAc,IAAAC,EAAA,OAAA9B,OAAA+B,EAAA,EAAA/B,CAAAqB,KAAAQ,GACZG,QAAQC,IAAI,uCACZH,EAAA9B,OAAAkC,EAAA,EAAAlC,CAAAqB,KAAArB,OAAAmC,EAAA,EAAAnC,CAAA6B,GAAAO,KAAAf,QAOFgB,YAAc,WACZL,QAAQC,IAAI,sBACZ,IAAMK,EAAiBR,EAAKS,MAAMC,SAASC,OAAS,EAC9CC,EAAoBZ,EAAKS,MAAzBG,gBACNA,GAAoC,EAIhCJ,EAAiB,KAFrBI,EAAkBC,KAAKC,IAAID,KAAKE,IAAIH,EAAiB,GAAIJ,KAGvDR,EAAKgB,YAGPhB,EAAKiB,SAAS,CACZL,qBAtBUZ,EA0BdkB,aAAe,WACbhB,QAAQC,IAAI,uBADO,IAEbS,EAAoBZ,EAAKS,MAAzBG,gBACNA,GAAoC,EACpCA,EAAkBC,KAAKC,IACrBD,KAAKE,IAAIH,EAAiB,GAC1BZ,EAAKS,MAAMC,SAASC,OAAS,GAG/BX,EAAKiB,SAAS,CACZL,qBApCUZ,EAwCdgB,UAxCc9C,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAwCF,SAAA6C,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAnD,EAAAC,EAAAM,KAAA,SAAA6C,GAAA,cAAAA,EAAA3C,KAAA2C,EAAA1C,MAAA,cACVoB,QAAQC,IAAI,gBADFqB,EAAA1C,KAAA,EAEad,IAFb,cAEJoD,EAFII,EAAAvC,KAGNoC,EAAUD,EAASK,MAAM,EAAG,IAAIC,IAAIjC,GAH9B+B,EAAA1C,KAAA,EAIU6C,QAAQC,IAAIP,GAJtB,OAINC,EAJME,EAAAvC,KAKNsC,EAAgBD,EAAQO,OAAO,SAAAC,GAAI,QAAMA,IAC7C5B,QAAQC,IAAI,UAAWoB,GACvBvB,EAAKiB,SAAS,CACZP,SAAUa,IARF,yBAAAC,EAAApC,SAAA+B,MArCVnB,EAAKS,MAAQ,CACXC,SAAU,GACVE,gBAAiB,GALPZ,mFA2EZE,QAAQC,IAAI,4BACZZ,KAAKyB,6CA0BE,IAAAe,EAAAxC,KACPW,QAAQC,IAAI,uBAAwBZ,KAAKkB,MAAMG,iBAC/C,IAAMoB,EAAazC,KAAKkB,MAAMC,SAASnB,KAAKkB,MAAMG,iBAC5CF,EAAWnB,KAAKkB,MAAMC,SAU5B,OATAR,QAAQC,IAAI,aAAc6B,GAC1B9B,QAAQC,IAAI,WAAYO,GAStBuB,EAAA5D,EAAA6D,cAAA,OAAKC,UAAU,uBACbF,EAAA5D,EAAA6D,cAAA,OAAKC,UAAU,aAAaC,QAAS7C,KAAK2B,eAC1Ce,EAAA5D,EAAA6D,cAAA,OAAKC,UAAU,cAAcC,QAAS7C,KAAKgB,cAC3C0B,EAAA5D,EAAA6D,cAAA,OAAKC,UAAU,kBACZH,GACCC,EAAA5D,EAAA6D,cAAA,OACEC,UAAU,aACVjB,aAAc,kBAAMa,EAAKb,aAAaa,IACtCxB,YAAa,kBAAMwB,EAAKxB,YAAYwB,KAGpCE,EAAA5D,EAAA6D,cAAA,KAAGG,KAAML,EAAWxD,KAClByD,EAAA5D,EAAA6D,cAAA,cAASF,EAAWM,QAEtBL,EAAA5D,EAAA6D,cAAA,WACAD,EAAA5D,EAAA6D,cAAA,WACAD,EAAA5D,EAAA6D,cAAA,gBAAQF,EAAWO,cArIfC,aC9BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAA5D,EAAA6D,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.822517f3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport rebase from \"re-base\";\nimport firebase from \"firebase/app\";\n// import { Card, CardWrapper } from \"react-swipeable-cards\";\nimport database from \"firebase/database\";\nimport \"./App.css\";\n\n//let urlMetadata = require(\"url-metadata\");\nconst HN_DATABASE_URL = \"https://hacker-news.firebaseio.com/\";\nconst HN_VERSION = \"v0\";\n\n/*firebase.initializeApp({ baseURL: HN_DATABASE_URL + \"/\" + HN_VERSION });\nlet db = firebase.database();\nlet base = rebase.createClass(db);*/\nconst getNewStories = async url => {\n  const req = await fetch(\n    HN_DATABASE_URL + \"/\" + HN_VERSION + \"/newstories.json\"\n  );\n  const res = await req.json();\n  return res;\n};\n\nconst getStoryInfo = async storyId => {\n  const req = await fetch(\n    HN_DATABASE_URL + \"/\" + HN_VERSION + \"/item/\" + storyId + \".json\"\n  );\n  const res = await req.json();\n  return res;\n};\n// Api is a wrapper around base, to include the version child path to the binding automatically.\n/*const Api = {\n  bindToState: (endpoint, options) => {\n    return base.bindToState(`/${HN_VERSION}${endpoint}`, options);\n  },\n  listenTo: (endpoint, options) => {\n    return base.listenTo(`/${HN_VERSION}${endpoint}`, options);\n  },\n  fetch: (endpoint, options) => {\n    return base.fetch(`/${HN_VERSION}${endpoint}`, options);\n  }\n};*/\n\nclass App extends Component {\n  constructor() {\n    console.log(\"Inside app.js constructor function\");\n    super();\n    this.state = {\n      _stories: [],\n      activePostIndex: 0\n    };\n  }\n\n  onSwipeLeft = () => {\n    console.log(\"I was swiped left.\");\n    const lastChildIndex = this.state._stories.length - 1;\n    let { activePostIndex } = this.state;\n    activePostIndex = activePostIndex + 1;\n\n    activePostIndex = Math.min(Math.max(activePostIndex, 0), lastChildIndex);\n\n    if (lastChildIndex - 5 === activePostIndex) {\n      this.fetchData();\n    }\n\n    this.setState({\n      activePostIndex\n    });\n  };\n\n  onSwipeRight = () => {\n    console.log(\"I was swiped right.\");\n    let { activePostIndex } = this.state;\n    activePostIndex = activePostIndex - 1;\n    activePostIndex = Math.min(\n      Math.max(activePostIndex, 0),\n      this.state._stories.length - 1\n    );\n\n    this.setState({\n      activePostIndex\n    });\n  };\n\n  fetchData = async () => {\n    console.log(\"fetch called\");\n    const storyIds = await getNewStories();\n    let actions = storyIds.slice(0, 10).map(getStoryInfo);\n    let results = await Promise.all(actions);\n    let filterResults = results.filter(item => !!item);\n    console.log(\"results\", filterResults);\n    this.setState({\n      _stories: filterResults\n    });\n    // const rank = index + 1;\n    // return await new Promise(resolve => {\n    //   Api.fetch(`/item/${id}`, {\n    //     then(data) {\n    //       let item = data;\n    //       // add the rank since it does not exist yet\n    //       item.rank = rank;\n    //       resolve(item);\n    //     }\n    //   });\n  };\n  /*Api.fetch(\n      `/newstories`,\n      {\n        context: this,\n        then(storyIds) {\n          console.log(`This is logged storyIds ${storyIds}`);\n          this.fetchNewStories(storyIds);\n        }\n      },\n      { mode: \"cors\" }\n    );*/\n  //};\n\n  componentDidMount() {\n    console.log(\"componentDidMount called\");\n    this.fetchData();\n  }\n\n  /*fetchNewStories = async storyIds => {\n    let actions = storyIds.slice(0, 10).map(this.fetchSingleStory);\n    let results = await Promise.all(actions);\n    console.log(\"results\", results);\n    this.setState({\n      _stories: results\n    });\n  };\n\n  fetchSingleStory = async (id, index) => {\n    const rank = index + 1;\n    return await new Promise(resolve => {\n      Api.fetch(`/item/${id}`, {\n        then(data) {\n          let item = data;\n          // add the rank since it does not exist yet\n          item.rank = rank;\n          resolve(item);\n        }\n      });\n    });\n  };*/\n\n  render() {\n    console.log(\"this.activePostIndex\", this.state.activePostIndex);\n    const activePost = this.state._stories[this.state.activePostIndex];\n    const _stories = this.state._stories;\n    console.log(\"activePost\", activePost);\n    console.log(\"_stories\", _stories);\n    //metadata processing\n    /*if (activePost) {\n      console.log(\"url extracted\", activePost.url);\n      urlMetadata(activePost.url).then(function(metadata) {\n        console.log(metadata);\n      });\n    }*/\n    return (\n      <div className=\"background-gradient\">\n        <div className=\"split left\" onClick={this.onSwipeRight} />\n        <div className=\"split right\" onClick={this.onSwipeLeft} />\n        <div className=\"snap-container\">\n          {activePost && (\n            <div\n              className=\"snap-child\"\n              onSwipeRight={() => this.onSwipeRight(this)}\n              onSwipeLeft={() => this.onSwipeLeft(this)}\n            >\n              {/* {console.log(\"Inside child\")} */}\n              <a href={activePost.url}>\n                <strong>{activePost.title}</strong>\n              </a>\n              <br />\n              <hr />\n              <span>-{activePost.by}</span>\n            </div>\n          )}\n        </div>\n        {/*{_stories.map(story => (\n            <Card\n              onSwipeRight={this.onSwipeRight}\n              onSwipeLeft={this.onSwipeLeft}\n              style={{ transform: \"none\" }}\n              key={story.rank}\n            >\n              <a href={story.url}>\n                <strong>{story.title}</strong>\n              </a>\n              <br />\n              <hr />\n              <span>-{story.by}</span>\n            </Card>\n          ))}\n        </CardWrapper>\n        {activePost && (\n          <div>\n            <div className=\"note\">\n              <a href={activePost.url}>\n                <strong>{activePost.title}</strong>\n              </a>\n\n              <br />\n              <hr />\n              <span>-{activePost.by}</span>\n            </div>\n          </div>\n        )}*/}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}